/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/clrKfT1Tdri
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Libre_Franklin } from 'next/font/google'
import { Libre_Franklin } from 'next/font/google'

libre_franklin({
  subsets: ['latin'],
  display: 'swap',
})

libre_franklin({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
'use client'
import { Button } from "@/components/ui/button"
import { JSX, SVGProps, useState } from "react"
/*import { makeIPInspector } from 'next-fortress/ip'

export const middleware = makeIPInspector('125.103.20.82', {
  type: 'redirect',
  destination: '/this-page-probably-does-not-exist'
})*/


export type Tile = {
  id: string
  name: string;
  description: string;
}

type Props = {
  list: Tile[];
}

export function VotingCore(props: Props) {

  const [checkboxes, setCheckboxes] = useState({});
  const dataToShow = props.list;
  
  // Initialize the checkboxes state based on the checkboxData
  useState(() => {
    const initialCheckboxes: { [key: string]: boolean } = {};
    dataToShow.forEach((tile) => {
      initialCheckboxes[tile.id] = false;
    });
    setCheckboxes(initialCheckboxes);
  });

  const handleCheckboxChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const { name, checked } = event.target;
    setCheckboxes(prevState => ({
      ...(prevState as { [key: string]: boolean }),
      [name]: checked
    }));
  };

  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    console.log(checkboxes);
  };

  return (
    <form onSubmit={handleSubmit}>
    <div key="1" className="flex flex-col items-center justify-center w-full h-full">
    <section className="bg-gradient-to-r from-[#6366F1] to-[#8B5CF6] w-full py-12 md:py-16 lg:py-20">
      <div className="container mx-auto px-4 md:px-6">
        <div className="flex flex-col items-center text-center space-y-4">
          <h1 className="text-3xl font-bold text-white sm:text-4xl md:text-5xl">
            鯛獲るタイトル
          </h1>
          <p className="max-w-[600px] text-gray-200 md:text-lg">
            学生の本文は勉強なり。
          </p>
        </div>
      </div>
    </section>

    <section className="container px-4 md:px-6 py-12 md:py-16 lg:py-20">
      <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-4">
    {dataToShow.map((value) => (
        <label key={value.id} className="option-tile bg-white dark:bg-gray-800 rounded-lg shadow-sm hover:shadow-md transition-shadow cursor-pointer w-full border border-gray-200 dark:border-gray-700">
          <input className="peer sr-only" name={value.id} type="checkbox" checked={checkboxes[value.id as keyof typeof checkboxes] || false} onChange={handleCheckboxChange}/>
          <div className="p-3 flex flex-col items-center justify-center space-y-2">
            <CodeIcon className="h-6 w-6 text-indigo-500" />
            <h3 className="text-sm font-semibold">{value.name}</h3>
            <p className="text-gray-500 dark:text-gray-400 text-center text-xs">
              {value.description}
            </p>
          </div>
        </label>
    ))}
      </div>
    </section>

    <section className="container px-4 md:px-6 pb-12 md:pb-16 lg:pb-20">
      <div className="flex justify-center">
        <Button
          className="px-6 py-3 rounded-full text-lg font-semibold bg-gradient-to-r from-[#6366F1] to-[#8B5CF6] text-white dark:text-white hover:from-[#8B5CF6] hover:to-[#6366F1] transition-colors"
          variant="default"
          //onClick=
        >
          投票を確定
        </Button>
      </div>
    </section>
  </div>
  </form>
  )
}

function CodeIcon(props: JSX.IntrinsicAttributes & SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <polyline points="16 18 22 12 16 6" />
      <polyline points="8 6 2 12 8 18" />
    </svg>
  )
}
